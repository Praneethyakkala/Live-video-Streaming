#importing Libraries
import socket
import cv2
import pickle
import struct
import imutils

Client socket
# create an INET, STREAMing socket :
client socket = socket.socket (socket.AF_INET, socket.SOCK_STREAM)
host ip = '<localhost>'# Standard loopback interface address (localhost)
port = 10050 # Port to listen on (non-privileged ports are > 1023)
# now connect to the web server on the specified port number
client_socket.connect((host_ip,port))
#'b' or 'B'produces an instance of the bytes type instead of the str type
#used in handling binary data from network connections
data = b"*
# Q: unsigned Long Long integer(8 bytes)
payload_size = struct.calcsize("Q")

Server socket
# create an INET, STREAMing socket
server_socket = socket.socket (socket.AF_INET, socket.sock_STREAM)
host name = socket.gethostname()
host_ip = socket.gethostbyname(host_name)
print('HOST IP:"host_ip)
port = 10050
socket_address = (host_ip,port)
print('Socket created')
# bind the socket to the host.
#The values passed to bind() depend on the address family of the socket

while True:
client_socket, addr = server_socket.accept()
print('Connection from:', addr)
if client_socket:
vid = cv2.VideoCapture(0)
while(vid.isOpened()):
img, frame = vid.read()
a = pickle.dumps (frame)
message = struct.pack("Q", len(a))+a
client_socket.sendall(message)
cv2.imshow('Sending...', frame)
key = cv2.waitkey (10)
if key ==13:
client_socket.close()

while True:
while len(data) <payload_size:
packet = client_socket.recv(4*1024)
if not packet: break
data+=packet
packed_msg_size = data[:payload_size]
data = data[payload_size:]
msg_size = struct.unpack("Q", packed_msg_size)[0]
while len(data) < msg_size:
data += client_socket.recv(4*1024)
frame_data = data[:msg_size]
data
= data[msg_size:]
frame =
pickle.loads (frame_data)
cv2.imshow("Receiving...", frame)
key CV2.waitkey (10)
if key == 13:
break
client_socket.close()
